package main

//go:generate go run main.go

import (
	_ "embed"
	"encoding/json"
	"fmt"
	"os"
	"strings"
	"text/template"
)

const (
	ENUM_FILE_NAME = "enum.json"
)

type Enum struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

type Enums struct {
	Type    string `json:"type"`
	Package string `json:"package"`
	Data    []Enum `json:"data"`
}

func main() {
	var enums []Enums
	enumBytes, _ := os.ReadFile(ENUM_FILE_NAME)
	if err := json.Unmarshal(enumBytes, &enums); err != nil {
		panic(err)
	}
	fmt.Println(enums)

	for _, e := range enums {
		os.Mkdir(e.Package, 0755)
		f, err := os.Create("./" + e.Package + "/" + strings.ToLower(e.Type) + ".go")
		if err != nil {
			panic(err)
		}
		defer f.Close()

		err = enumTemplate.Execute(f, e)
		if err != nil {
			panic(err)
		}
	}
}

var enumTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
package {{.Package}}
{{ $type := .Type }}
type {{$type}} int
{{ $data := .Data }}
const (
{{- range $d := $data }}
	{{ $d.Id }} {{ $type }} = iota
{{- end }}
)

func (e {{ $type }}) String() string {
    switch e {
{{- range $i, $d := .Data }}
	case {{ $d.Id }}:
		return {{ printf "%q" $d.Name }}
{{- end }}
    default:
        return "Unknown {{ $type }}"
    }
}
`))
